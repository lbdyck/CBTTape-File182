/*% NOCOMMENT REXX

  RXDATE -- provides enhancements to all options of the DATE() function
  provided by REXX, and also provides 9 additional options.

  Source:   Bruce Sacco (dc.sysf80@ts3.teale.ca.gov)
            via the TSO REXX Discussion List

  Author:   Steve Rushing of the Health and Welfare Data
            Center, State of Calif.

  Mods:     John Kalinich (jkalinic@csc.com) Year 2000 (Oct 1997)

The format of the RXDATE function is:

  +--------------------------------------------------------------+
    RXDATE((option,parm1,parm2))
  +--------------------------------------------------------------+

Options:

  NULL option i.e. RXDATE() or RXDATE(,parm1) converts the date
     supplied in parm1 to the format 'dd Mmm yyyy', and returns it
     as the value of the function.

     parm1 = a Date in the format mm/dd/yy or mm/dd/yyyy
     parm2 = not used

     e.g.  RXDATE(,'10/06/85')   returns ===> 06 Oct 1985
           RXDATE(,'10/06/2000') returns ===> 06 Oct 2000

  C  (Century); returns as the function value, the number of day into
     the century the date represents. The returned value is of the form
     ddddd with no leading zeroes.

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = not used

     e.g.  RXDATE(c,'01/10/85')   returns ===> 31056
           RXDATE(c,'01/10/1800') returns ===> 10

  D  (Days); returns as the function value, the number of days into the
     year, the date represents.

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = not used

     e.g.  RXDATE(d,'01/10/85')   returns ===> 10
           RXDATE(d,'07/10/1800') returns ===> 191

  E  (European); returns as the value of the function, dd/mm/yy if
     the date supplied in parm1 is >= the 1900's, or dd/mm/yyyy if
     the date supplied in parm1 is < the 1900's.

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = not used

     e.g.  RXDATE(e,'01/23/85')   returns ===> 23/01/85
           RXDATE(e,'01/23/1800') returns ===> 23/01/1800

  J  (Julian-OS); returns as the value of the function, yyddd
     representing the date supplied in parm1.

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = not used

     e.g.  RXDATE(j,'07/23/85')   returns ===> 85204
           RXDATE(j,'07/23/1885') returns ===> 85204

  M  (Month); returns as the value of the function, the full name of
     the month, for the date supplied in parm1.

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = not used

     e.g.  RXDATE(m,'01/23/85')   returns ===> January
           RXDATE(m,'07/23/1885') returns ===> July

  O  (Ordered); returns as the value of the function,  yy/mm/dd if the
     date supplied in parm1 is >= the 1900's, or yyyy/mm/dd if the date
     supplied in parm1 is < the 1900's.

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = not used

     e.g.  RXDATE(o,'07/23/85')   returns ===> 85/07/23
           RXDATE(o,'07/23/1885') returns ===> 1885/07/23

  S  (Sorted); returns as the value of the function, yyyymmdd
     representing the date supplied in parm1

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = not used

     e.g.  RXDATE(s,'07/23/85')   returns ===> 19850723
           RXDATE(s,'07/23/1885') returns ===> 18850723

  U  (USA); returns as the value of the function,  mm/dd/yy if the
     date supplied in parm1 is >= the 1900's, or mm/dd/yyyy if the date
     supplied in parm1 is < the 1900's. If you just want the
     current date, the built-in DATE() function is more efficient.

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = not used

     e.g.  RXDATE(u,'07/23/85')   returns ===> 07/23/85
           RXDATE(u,'07/23/1985') returns ===> 07/23/85
           RXDATE(u,'07/23/1885') returns ===> 07/23/1885

  W  (WEEKDAY) returns as the value of the function, the full name of
     the day-of-the-week, for the date specified in parm1.

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = not used

     e.g.  RXDATE(w,'01/01/2000') returns ===> Saturday
           RXDATE(w,'07/04/1776') returns ===> Thursday

  1  Converts TRUE Julian number to corresponding GREGORIAN date,
     and returns the GREGORIAN date as the value of the function.

     parm1 = null (TRUE julian number for current date) or
             number in range 1721426-5373484 inclusive.
                 1721426 = 01/01/0001
                 5373484 = 12/31/9999
     parm2 = not used

     e.g.  RXDATE(1,2446270)   returns ===> 07/23/85
           RXDATE(1,2455198)   returns ===> 01/01/2010

  2  Converts GREGORIAN date to corresponding TRUE Julian number, and
     returns the TRUE julian number as the value of the function.

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = not used

     e.g.  RXDATE(2,'07/23/85')   returns ===> 2446270
           RXDATE(2,'01/01/2010') returns ===> 2455198

  3  Converts Julian-OS (yyddd) to TRUE Julian number, and returns the
     TRUE julian number as the value of the function.

     parm1 = null (Julian-OS for current date) or yyddd
             yy assumed if >= 1900's
     parm2 = not used

     e.g.  RXDATE(3,85100)   returns ===> 2446166

  4  Converts TRUE Julian number to Julian-OS, and returns the
     Julian-OS as the value of the function.

     parm1 = null (TRUE julian number for current date) or
             number in range 1721426-5373120 inclusive.
                 1721426 = 01/01/0001
                 5373120 = 12/31/9999
     parm2 = not used

     e.g.  RXDATE(4,2446270)   returns ===> 85204    07/23/85
           RXDATE(4,2455198)   returns ===> 10001    01/01/2010

     *** note -- Obviously this makes sense only for the 1900's.

  5  Converts Julian-OS to GREGORIAN date, and returns the GREGORIAN
     date as the value of the function.

     parm1 = null (Julian-OS for current date) or yyddd
             yy assumed if >= 1900's
     parm2 = not used

     e.g.  RXDATE(5,85205)   returns ===>  07/24/85

  6  Returns the date xx days hence or before.  Base date supplied in
     parm1, number of days hence (+ or -) supplied in parm2.

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = null (0) or positive/negative integer

     e.g.  RXDATE(6,,1)            returns ===>  next day's date
           RXDATE(6,'07/23/85',10) returns ===>  08/02/85
           RXDATE(6,'07/23/85',-5) returns ===>  07/18/85

  7  Returns as the value of the function, the number of days from one
     date to another. The number of days from one day to the next is
     considered one (1).

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = null (current date) or mm/dd/yy or mm/dd/yyyy

     e.g.  RXDATE(7,,'01/01/2000')             returns ===>  5288
                  (assuming current date is 7/10/85)
           RXDATE(7,'01/01/1900','01/01/2000') returns ===> 36524
           RXDATE(7,'01/01/2000','01/01/1900') returns ===> 36524

  8  Returns as the value of the function, the number of the
     day-of-the-week, 1-7 for Sunday-Saturday respectively, for
     date specified in parm1.

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = not used

     e.g.  RXDATE(8,'01/01/2000') returns ===> 7
           RXDATE(8,'07/04/1776') returns ===> 5

  9  Edits the supplied date.  Returns '1' if date supplied in parm1 is
     valid; returns 'ERROR' if date is invalid.

     parm1 = null (current date) or mm/dd/yy or mm/dd/yyyy
     parm2 = not used

     e.g.  RXDATE(9,'a1/01/2000') returns ===> ERROR
           RXDATE(9,'01/33/1985') returns ===> ERROR    (33 not valid)
           RXDATE(9,'07/04/1776') returns ===> 1
           RXDATE(9,'02/29/85')   returns ===> ERROR    (not leap year)
           RXDATE(9,'02/29/84')   returns ===> 1


Defaults:

  Discussed under each option.

====================== NOTES NOTES NOTES =======================

When specifying dates in the parms, the date can be supplied as
mm/dd/yy, or mm/dd/yyyy. This allows for dates not in the 1900's.
Any date of the form mm/dd/yy is assumed in the 1900's if yy is >=
the value of the date window variable (win19xx)..

For options requesting a date be returned in the form mm/dd/yy,
dd/mm/yy, or yy/mm/dd, the yy portion will be 2 digits if the year is
>= the 1900's or 4 digits if < the 1900's.

The RXDATE function emulates all of the options of the REXX built-
in function DATE(), and also has nine (9) other options.  The REXX
built-in DATE() function however, returns data concerning the current
date only; for example DATE(M) will return the full name of the current
month, whereas RXDATE(M) will do the same thing, but you can specify
a parm i.e. RXDATE(M,'02/13/86') which will return 'February'.

This is true for all of the RXDATE options which correspond to the
same option for the REXX DATE built-in function.

Options C, D, E, J, M, O, S, U, and W are the same as for the DATE
built-in function, except you can specify any date as a parm. As another
example of this, if today is Wednesday, and you execute code DATE(W),
or RXDATE(W), 'Wednesday' will be returned from the function; if you
want to know what day January 1, 2000 is, you can code:

          day = RXDATE(W,'01/01/2000')

and the variable 'day' will contain 'Saturday'.

===================== END OF NOTES ============================= */

   trace

   option = arg(1)
   parm1  = arg(2)
   parm2  = arg(3)

   CALL INIT_LOGIC
   CALL MAIN_LOGIC
   CALL CLOSING_LOGIC
   If errors_present = true
   then
   EXIT 'ERROR'
   else
   EXIT answer

INIT_LOGIC:

   ONCE = 1
   TRUE = 1
   FALSE = 0
   NULL = ''
   ERRORS_PRESENT = FALSE
   STACK_DELIMITER = 'FAFBFCFDFEFFFEFDFCFBFA'X
   HI = '1DC8'X
   LO = '1D60'X
   existing_date_options = 'CDEJMOSUW'
   new_date_options = '123456789'
   option_string = 'CDEJMOSUW123456789'
   options_returning_data_with_slashes = 'EOU156'
   first_parm_mmddyy_options = 'CDEJMOSUW26789'
   first_parm_true_julian_options = '14'
   first_parm_false_julian_options = '35'
   second_parm_numeric_options = '6'
   second_parm_mmddyy_options = '7'

   RETURN

MAIN_LOGIC:

   call edit_options_and_parms

   do once while errors_present = false
      select
         when option = ''  then
         answer = date_function_for_null_option(parm1)
         when index(existing_date_options,option) /= 0 then
         call emulate_existing_function_with_extended_capability
         when index(new_date_options,option) /= 0 then
         call perform_functions_of_new_options
         otherwise
         nop
      end
   end

   RETURN

emulate_existing_function_with_extended_capability:

   select
      when option = 'C' then
      answer = number_of_days_from_start_of_century(parm1)
      when option = 'D' then
      answer = number_of_days_from_start_of_year(parm1)
      when option = 'E' then
      answer = date_in_european_format(parm1)
      when option = 'J' then
      answer = julian_os_the_false_julian(parm1)
      when option = 'M' then
      answer = full_name_of_the_month(parm1)
      when option = 'O' then
      answer = date_in_form_YY_MM_DD(parm1)
      when option = 'S' then
      answer = date_in_form_YYYYMMDD(parm1)
      when option = 'U' then
      answer = date_in_form_MM_DD_YY(parm1)
      when option = 'W' then
      answer = full_name_of_the_day(parm1)
      otherwise
      nop
   end

   Return answer

perform_functions_of_new_options:

   select
      when option =  1  then
      answer = convert_true_julian_to_gregorian(parm1)
      when option =  2  then
      answer = convert_gregorian_to_true_julian(parm1)
      when option =  3  then
      answer = convert_false_julian_to_true_julian(parm1)
      when option =  4  then
      answer = convert_true_julian_to_false_julian(parm1)
      when option =  5  then
      answer = convert_false_julian_to_gregorian(parm1)
      when option =  6  then
      answer = number_of_days_hence_plus_or_minus(parm1,parm2)
      when option =  7  then
      answer = difference_in_days_between_two_dates(parm1,parm2)
      when option =  8  then
      answer = return_day_of_week_1_thru_7(parm1)
      when option =  9  then
      answer = just_edit_the_date(parm1)
      otherwise
      nop
   end

   Return

CLOSING_LOGIC:

   call reformat_year_in_answer_to_2_digits_if_1900s

   RETURN

reformat_year_in_answer_to_2_digits_if_1900s:

   do once while errors_present = false &,
        index(options_returning_data_with_slashes,option) /= 0
      parse value answer with v1 '/' v2 '/' v3 .
      select
         when length(v1) > 2 then
         do
            if substr(v1,1,2) >= '19' then v1 = 2digit(v1)
         end
         when length(v2) > 2 then
         do
            if substr(v2,1,2) >= '19' then v2 = 2digit(v2)
         end
         when length(v3) > 2 then
         do
            if substr(v3,1,2) >= '19' then v3 = 2digit(v3)
         end
         otherwise
         nop
      end
      answer = v1 '/' v2 '/' v3
      answer = space(answer,'0')
   end

   Return

date_function_for_null_option: procedure

   arg parm1
   parse value parm1 with mm '/' dd '/' yy .

   answer = right(dd,2,'0') substr(name_of_month_text(mm),1,3),
     4digit_year(yy)

   answer = space(answer,'1')

   Return answer

number_of_days_from_start_of_century: procedure

   arg parm1
   parse value parm1 with mm '/' dd '/' yy .
   yy = 4digit_year(yy)
   century_yr = century(yy)
   answer = jnum(mm,dd,yy) - jnum(1,1,century_yr) + 1

   Return answer

number_of_days_from_start_of_year: procedure

   arg parm1
   parse value parm1 with mm '/' dd '/' yy .
   yy = 4digit_year(yy)
   answer = jnum(mm,dd,yy) - jnum(01,01,yy) + 1

   Return answer

date_in_european_format: procedure

   arg parm1
   parse value parm1 with mm '/' dd '/' yy .
   answer = space(dd '/' mm '/' yy,'0')

   Return answer

julian_os_the_false_julian: procedure

   arg parm1
   parse value parm1 with mm '/' dd '/' yy .
   v1 = 2digit(yy)
   v2 = number_of_days_from_start_of_year(parm1)
   answer = v1||right(v2,3,'0')

   Return answer

full_name_of_the_month: procedure

   arg parm1
   parse value parm1 with mm '/' .
   answer = name_of_month_text(mm)

   Return answer

date_in_form_YY_MM_DD: procedure

   arg parm1
   parse value parm1 with mm '/' dd '/' yy .
   answer = yy '/' mm '/' dd
   answer = space(answer,'0')

   Return answer

date_in_form_YYYYMMDD: procedure

   arg parm1
   parse value parm1 with mm '/' dd '/' yy .
   answer = 4digit_year(yy) 2digit(mm) 2digit(dd)
   answer = space(answer,'0')

   Return answer

date_in_form_MM_DD_YY: procedure

   arg parm1
   answer = parm1

   Return answer

full_name_of_the_day: procedure

   arg parm1
   parse value parm1 with mm '/' dd '/' yy .
   answer = name_of_day_text(day_of_week(mm,dd,yy))

   Return answer

convert_true_julian_to_gregorian: procedure

   arg parm1
   answer = gregday(parm1)

   Return answer

convert_gregorian_to_true_julian: procedure

   arg parm1
   parse value parm1 with mm '/' dd '/' yy .
   answer = jnum(mm,dd,yy)

   Return answer

convert_false_julian_to_true_julian: procedure

   arg parm1
   answer =  fjul_tjul(parm1)

   Return answer

convert_true_julian_to_false_julian: procedure

   arg parm1
   answer =  tjul_fjul(parm1)

   Return answer

convert_false_julian_to_gregorian: procedure

   arg parm1
   answer =  gregday(fjul_tjul(parm1))

   Return answer

number_of_days_hence_plus_or_minus:

   procedure expose errors_present true

   parm1 = arg(1)
   parm2 = arg(2)
   parse value parm1 with mm '/' dd '/' yy .
   select
      when parm2 < 0 & abs(parm2) > (jnum(mm,dd,yy) - 1721426) then
      do
         errors_present = true
      end
      when parm2 >= 0 & parm2 >  (5373484 - jnum(mm,dd,yy)) then
      do
         errors_present = true
      end
      otherwise
      do
         answer = gregday(jnum(mm,dd,yy) + parm2)
      end
   end

   Return answer

difference_in_days_between_two_dates: procedure

   parm1 = arg(1)
   parm2 = arg(2)
   parse value parm1 with mm1 '/' dd1 '/' yy1 .
   parse value parm2 with mm2 '/' dd2 '/' yy2 .
   answer = abs(jnum(mm1,dd1,yy1) - jnum(mm2,dd2,yy2))

   Return answer

return_day_of_week_1_thru_7: procedure

   arg parm1
   parse value parm1 with mm '/' dd '/' yy .
   yy = 4digit_year(yy)
   answer = day_of_week(mm,dd,yy)

   Return  answer

just_edit_the_date: procedure

/* date must be good or we would not get here */

   answer = 1

   Return answer

jnum: procedure

   month = arg(1)
   day   = arg(2)
   year  = arg(3)

   year  = 4digit_year(year)

   numeric digits 15

   If month > 2
   then
   month = month - 3
   else
   do
      month = month + 9
      year = year - 1
   end

   c =     year % 100
   ya =     year - 100 * c
   julian_number =    (146097 * c  % 4) +    ((1461 * ya) % 4) +,
     ((153 * month + 2) % 5) + day + 1721119

   return julian_number

GREGDAY: procedure

   jn = arg(1)
   numeric digits 15
   jn = jn - 1721119
   year =    ((4 * jn - 1) % 146097)
   jn =    (4 * jn - 1 - 146097 * year)
   day =     jn % 4
   jn =    ((4 * day + 3) % 1461)
   day =    (4 * day + 3 - 1461 * jn)
   day =    ((day + 4) % 4)
   month =    ((5 * day - 3) % 153)
   day   =    (5 * day - 3 - 153 * month)
   day =    ((day + 5) % 5)
   year =    (100 * year + jn)

   If month < 10
   Then
   month = month + 3
   Else
   Do
      month = month - 9
      year  = year + 1
   End

   return mm_dd_yyyy(month,day,year)

mm_dd_yy: procedure

   mm = arg(1)
   dd = arg(2)
   yy = arg(3)

   answer = right(month,2,'0') '/' right(day,2,'0') '/',
     right(year,2,'0')
   answer = space(answer,0)

   return answer

day_of_week: procedure

   mm = arg(1)
   dd = arg(2)
   yy = arg(3)

   w_var  =     (jnum(mm,dd,yy) - jnum(1,1,1984)) // 7

   if w_var >= 0 then
   answer = w_var + 1
   else
   answer = w_var + 8

   Return answer

TJUL_FJUL: procedure /* true julian to false julian */

   true_julian_number = arg(1)
   greg_date = gregday(true_julian_number)
   greg_year = substr(greg_date,7,4)
   false_julian_day = true_julian_number - jnum(1,1,greg_year) + 1
   answer = substr(greg_year,3,2)||right(false_julian_day,3,'0')

   return answer

FJUL_TJUL: procedure /* false julian to true julian */

   false_julian_number = arg(1)
   false_julian_year   = substr(false_julian_number,1,2)
   false_julian_day    = substr(false_julian_number,3,3)
   answer = jnum(1,1,false_julian_year) + false_julian_day - 1

   return answer

mm_dd_yyyy: procedure

   mm   = arg(1)
   dd   = arg(2)
   yyyy = arg(3)

   answer = right(mm,2,'0') '/' right(dd,2,'0') '/',
     right(yyyy,4,'0')
   answer = space(answer,'0')

   return answer

edit_options_and_parms:

   call edit_options
   do once while errors_present = false
      call edit_parms
   end

   Return

edit_options:

   upper option

   select
      when option = null then nop
      when index(option_string,option) /= 0 then nop
      otherwise
      do
         errors_present = true
      end
   end

   Return

edit_parms:

   call edit_the_first_parm
   call edit_the_second_parm

   Return

edit_the_first_parm:

   parm1 = space(parm1,'0')

   select
      when parm1 = null then
      call generate_default_value_for_parm1
      when index(first_parm_mmddyy_options,option) /= 0 &,
        mmddyy_edit_ok(parm1) = true then
      NOP
      when index(first_parm_true_Julian_options,option) /= 0 &,
        true_julian_edit_ok(parm1) = true then
      NOP
      when index(first_parm_false_julian_options,option) /= 0 &,
        false_julian_edit_ok(parm1) = true then
      NOP
      when option = null & mmddyy_edit_ok(parm1) = true then
      NOP
      otherwise
      errors_present = true
   end

   Return

generate_default_value_for_parm1:

   select
      when index(first_parm_mmddyy_options,option) /= 0 then
      parm1 = DATE(U)
      when index(first_parm_true_julian_options,option) /= 0 then
      do
         parse value DATE(U) with mm '/' dd '/' yy .
         parm1 = jnum(mm,dd,yy)
      end
      when index(first_parm_false_julian_options,option) /= 0 then
      parm1 = DATE(J)
      when option = null then parm1 = DATE(U)
      otherwise
      nop
   end

   Return


edit_the_second_parm:

   parm2 = space(parm2,'0')

   select
      when parm2 = null then
      call generate_default_value_for_parm2
      when index(second_parm_numeric_options,option) /= 0 &,
        datatype(parm2,'N') = true then
      NOP
      when index(second_parm_mmddyy_options,option) /= 0 &,
        mmddyy_edit_ok(parm2) = true then
      NOP
      otherwise
      errors_present = true
   end

   Return

generate_default_value_for_parm2:

   select
      when index(second_parm_mmddyy_options,option) /= 0 then
      parm2 = DATE(U)
      when index(second_parm_numeric_options,option) /= 0 then
      parm2 = '0'
      otherwise
      nop
   end

   Return

mmddyy_edit_ok: procedure

   arg mmddyy

   parse value mmddyy with mm '/' dd '/' yy .
   answer = 0

   If datatype(mm,'N') & datatype(dd,'N') & datatype(yy,'N')
   then
   do
      yy = 4digit_year(yy)
      If gregday(jnum(mm,dd,yy)) = mm_dd_yyyy(mm,dd,yy)
      then
      do
         answer = 1
      end
   end

   return answer

false_julian_edit_ok: procedure

   arg false_julian

   select
      when datatype(false_julian,'N') /= 1  then
      do
         answer = 0
      end
      when length(false_julian) /= 5        then
      do
         answer = 0
      end
      when tjul_fjul(fjul_tjul(false_julian)) /= false_julian then
      do
         answer = 0
      end
      otherwise
      do
         answer = 1
      end
   end

   return answer

true_julian_edit_ok: procedure

   arg true_julian

   select
      when datatype(true_julian,'N') /= 1 then
      do
         answer = 0
      end
      when true_julian <  1721426   true_julian >  5373484 then
      do
         answer = 0
      end
      otherwise
      do
         answer = 1
      end
   end

   return answer

name_of_month_text: procedure

   mm = arg(1)

   answer = word('January February March April May June',
     ' July August September October',
     ' November December',mm)

   Return answer

name_of_day_text: procedure

   arg dd

   answer = word('Sunday Monday Tuesday Wednesday',
     ' Thursday Friday Saturday Sunday',dd)

   Return answer

century: procedure

   win19xx = 66          /* Start of 19xx date window */

   yyyy = arg(1)

   century_year = 100 * (yyyy % 100)

   If century_year < 100
   then
   do
      If century_year < win19xx
      then
      century_year = 2000
      else
      century_year = 1900
   end

   return century_year

2digit: procedure

   var = arg(1)

   var = right(var,2,'0')

   return var

   return

4digit: procedure

   var = arg(1)

   var = right(var,4,'0')

   return var

4digit_year: procedure

   win19xx = 66          /* Start of 19xx date window */

   yy = arg(1)

   If length(yy) < 3
   then
   do
      If yy < win19xx
      then
      yy = yy + 2000
      else
      yy = yy + 1900
   end

   return yy

Format_year_to_two_or_four_digit_year: procedure

   ddate = arg(1)
   parse value ddate with mm '/' dd '/' yy .

   select
      when length(yy) > 2 & substr(yy,1,2) >= '19' then
      do
         yy = 2digit(yy)
      end
      otherwise
      nop
   end

   answer = mm '/' dd '/' yy
   answer = space(answer,'0')

   return answer

/* J. Kalinich, 1-800-UNDR-DOG                                        */
/* Rexx date conversion function                                      */
